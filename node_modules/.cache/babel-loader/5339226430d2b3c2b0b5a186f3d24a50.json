{"ast":null,"code":"var _jsxFileName = \"/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik, useFormikContext } from 'formik';\nimport { FormControl } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddPhrase = () => {\n  _s();\n  const [isHidden, setHidden] = useState(true);\n  const defaultPhraseColor = 'lightWood';\n  const [selectedPhrase, setSelectedPhrase] = useState('');\n  const [isDisabled, setDisabled] = useState(true);\n  const dispatch = useDispatch();\n  const validationSchema = yup.object({\n    phraseType: yup.string().required('Required'),\n    phraseText: yup.string().when(\"phraseType\", {\n      is: phraseType => phraseType === 'custom',\n      then: yup.string('Enter Text').matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i).required('Required')\n    }),\n    phraseColor: yup.string().when(\"phraseType\", {\n      is: phraseType => phraseType === 'custom',\n      then: yup.string('Choose Color').oneOf(['lightWood', 'darkWood'], 'Color required').required('Required')\n    })\n  });\n  const handleHidden = () => {\n    if (formik.values.phraseType) {\n      formik.values.phraseType === 'custom' ? setHidden(false) : setHidden(true);\n    }\n    formik.handleChange();\n  };\n  const formik = useFormik({\n    initialValues: {\n      phraseType: \"\",\n      phraseText: \"Mi texto\",\n      phraseColor: defaultPhraseColor\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      if (values.phraseType === 'custom') {\n        dispatch(customPhraseAdded({\n          text: values.phraseText,\n          color: values.phraseColor\n        }));\n      } else {\n        // default chosen\n        dispatch(defaultPhraseAdded({\n          defaultPhrase: values.phraseType\n        }));\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"choosePhraseType\",\n          children: \"Choose a Phrase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"phraseType\",\n          value: formik.values.phraseType,\n          labelId: \"choosePhraseType\",\n          onChange: handleHidden,\n          error: formik.touched.phraseType && Boolean(formik.errors.phraseType),\n          helperText: formik.touched.phraseType && formik.errors.phraseType,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"family\",\n            children: \"Family\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"friends\",\n            children: \"Friends\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"custom\",\n            children: \"Personalizado\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 31\n      }, this), !isHidden ? /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          type: \"string\",\n          variant: \"outlined\",\n          name: \"phraseText\",\n          defaultValue: formik.values.phraseText,\n          onChange: formik.handleChange,\n          error: formik.touched.phraseText && Boolean(formik.errors.phraseText),\n          helperText: formik.touched.phraseText && formik.errors.phraseText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"phraseColor\",\n          label: \"Choose Color\",\n          value: formik.values.phraseColor,\n          onChange: formik.handleChange,\n          error: formik.touched.phraseColor && Boolean(formik.errors.phraseColor),\n          helperText: formik.touched.phraseColor && formik.errors.phraseColor,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"lightWood\",\n            children: \"Light Wood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"darkWood\",\n            children: \"Dark Wood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Add Phrase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 13\n  }, this);\n};\n_s(AddPhrase, \"0i9m+3tspmKJEeVwnxwSe9T3K6c=\", false, function () {\n  return [useDispatch, useFormik];\n});\n_c = AddPhrase;\nexport default AddPhrase;\nvar _c;\n$RefreshReg$(_c, \"AddPhrase\");","map":{"version":3,"names":["React","useEffect","useState","Container","Box","InputLabel","Select","MenuItem","TextField","Button","Fragment","useDispatch","nextButtonEnabled","lightWoodBackground","darkWoodBackground","customPhraseAdded","defaultPhraseAdded","yup","Formik","Field","Form","ErrorMessage","useFormik","useFormikContext","FormControl","AddPhrase","isHidden","setHidden","defaultPhraseColor","selectedPhrase","setSelectedPhrase","isDisabled","setDisabled","dispatch","validationSchema","object","phraseType","string","required","phraseText","when","is","then","matches","phraseColor","oneOf","handleHidden","formik","values","handleChange","initialValues","onSubmit","text","color","defaultPhrase","handleSubmit","touched","Boolean","errors"],"sources":["/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik, useFormikContext} from 'formik';\nimport {FormControl} from \"@mui/material\";\n\nconst AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required('Required'),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => phraseType === 'custom',\n                              then: yup.string('Enter Text')\n                                    .matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n                                    .required('Required')\n                        }),\n            phraseColor: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => phraseType === 'custom',\n                              then: yup.string('Choose Color').oneOf(\n                                    ['lightWood', 'darkWood'],\n                                    'Color required')\n                                    .required('Required')\n                        }),\n      });\n\n      const handleHidden = () => {\n            if(formik.values.phraseType) {\n                  (formik.values.phraseType === 'custom') ? setHidden(false) : setHidden(true);\n            }\n            formik.handleChange();\n      }\n\n      const formik = useFormik({\n            initialValues: {\n                  phraseType: \"\",\n                  phraseText: \"Mi texto\",\n                  phraseColor: defaultPhraseColor\n            },\n            validationSchema: validationSchema,\n            onSubmit: (values) => {\n                  if(values.phraseType === 'custom') {\n                        dispatch(customPhraseAdded(\n                              {\n                              text: values.phraseText,\n                              color: values.phraseColor\n                              }\n                        ));\n                  } else {\n                        // default chosen\n                        dispatch(defaultPhraseAdded({\n                              defaultPhrase: values.phraseType\n                        }));\n                  }\n\n            },\n      });\n            \n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n                  <form onSubmit={formik.handleSubmit}>\n                              <FormControl fullWidth>\n                                    <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                                    <Select\n                                          name=\"phraseType\"\n                                          value={formik.values.phraseType}\n                                          labelId=\"choosePhraseType\"\n                                          onChange={handleHidden}\n                                          error={formik.touched.phraseType && Boolean(formik.errors.phraseType)}\n                                          helperText={formik.touched.phraseType && formik.errors.phraseType}\n                                    >\n                                          <MenuItem value=\"family\">Family</MenuItem>      \n                                          <MenuItem value=\"friends\">Friends</MenuItem>\n                                          <MenuItem value=\"custom\">Personalizado</MenuItem> \n                                    </Select>\n                              </FormControl>\n                              { !isHidden ? \n                              <Fragment>\n                                    <TextField\n                                          type=\"string\"\n                                          variant=\"outlined\"\n                                          name=\"phraseText\"\n                                          defaultValue={formik.values.phraseText}\n                                          onChange={formik.handleChange}\n                                          error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                          helperText={formik.touched.phraseText && formik.errors.phraseText}\n                                    />\n                                    \n                                    <Select\n                                          name=\"phraseColor\"\n                                          label=\"Choose Color\"\n                                          value={formik.values.phraseColor}\n                                          onChange={formik.handleChange}\n                                          error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                          helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                                    >\n                                          <MenuItem value=\"lightWood\">Light Wood</MenuItem>      \n                                          <MenuItem value=\"darkWood\">Dark Wood</MenuItem>\n                                    </Select>\n                              </Fragment> : null }\n                              <Button type=\"submit\" variant=\"contained\">Add Phrase</Button>\n                        </form>\n            </div>\n      );\n}\n\nexport default AddPhrase;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,SAAS,EAAEC,GAAG,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC/F,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,OAAOC,kBAAkB,MAAM,2BAA2B;AAC1D,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,uDAAuD;AAC7G,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,YAAY,EAAEC,SAAS,EAAEC,gBAAgB,QAAO,QAAQ;AACtF,SAAQC,WAAW,QAAO,eAAe;AAAC;AAE1C,MAAMC,SAAS,GAAG,MAAM;EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM0B,kBAAkB,GAAG,WAAW;EACtC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC6B,UAAU,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM+B,QAAQ,GAAGtB,WAAW,EAAE;EAE9B,MAAMuB,gBAAgB,GAAGjB,GAAG,CAACkB,MAAM,CAAC;IAC9BC,UAAU,EAAEnB,GAAG,CAACoB,MAAM,EAAE,CAACC,QAAQ,CAAC,UAAU,CAAC;IAC7CC,UAAU,EAAEtB,GAAG,CACFoB,MAAM,EAAE,CACRG,IAAI,CAAC,YAAY,EAAE;MACdC,EAAE,EAAEL,UAAU,IAAIA,UAAU,KAAK,QAAQ;MACzCM,IAAI,EAAEzB,GAAG,CAACoB,MAAM,CAAC,YAAY,CAAC,CACvBM,OAAO,CAAC,4BAA4B,CAAC,CACrCL,QAAQ,CAAC,UAAU;IAChC,CAAC,CAAC;IACdM,WAAW,EAAE3B,GAAG,CACHoB,MAAM,EAAE,CACRG,IAAI,CAAC,YAAY,EAAE;MACdC,EAAE,EAAEL,UAAU,IAAIA,UAAU,KAAK,QAAQ;MACzCM,IAAI,EAAEzB,GAAG,CAACoB,MAAM,CAAC,cAAc,CAAC,CAACQ,KAAK,CAChC,CAAC,WAAW,EAAE,UAAU,CAAC,EACzB,gBAAgB,CAAC,CAChBP,QAAQ,CAAC,UAAU;IAChC,CAAC;EACnB,CAAC,CAAC;EAEF,MAAMQ,YAAY,GAAG,MAAM;IACrB,IAAGC,MAAM,CAACC,MAAM,CAACZ,UAAU,EAAE;MACtBW,MAAM,CAACC,MAAM,CAACZ,UAAU,KAAK,QAAQ,GAAIT,SAAS,CAAC,KAAK,CAAC,GAAGA,SAAS,CAAC,IAAI,CAAC;IAClF;IACAoB,MAAM,CAACE,YAAY,EAAE;EAC3B,CAAC;EAED,MAAMF,MAAM,GAAGzB,SAAS,CAAC;IACnB4B,aAAa,EAAE;MACTd,UAAU,EAAE,EAAE;MACdG,UAAU,EAAE,UAAU;MACtBK,WAAW,EAAEhB;IACnB,CAAC;IACDM,gBAAgB,EAAEA,gBAAgB;IAClCiB,QAAQ,EAAGH,MAAM,IAAK;MAChB,IAAGA,MAAM,CAACZ,UAAU,KAAK,QAAQ,EAAE;QAC7BH,QAAQ,CAAClB,iBAAiB,CACpB;UACAqC,IAAI,EAAEJ,MAAM,CAACT,UAAU;UACvBc,KAAK,EAAEL,MAAM,CAACJ;QACd,CAAC,CACN,CAAC;MACR,CAAC,MAAM;QACD;QACAX,QAAQ,CAACjB,kBAAkB,CAAC;UACtBsC,aAAa,EAAEN,MAAM,CAACZ;QAC5B,CAAC,CAAC,CAAC;MACT;IAEN;EACN,CAAC,CAAC;EAEF,oBACM;IAAA,wBACM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB,eACnB;MAAM,QAAQ,EAAEW,MAAM,CAACQ,YAAa;MAAA,wBACxB,QAAC,WAAW;QAAC,SAAS;QAAA,wBAChB,QAAC,UAAU;UAAC,EAAE,EAAC,kBAAkB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAA6B,eAC9D,QAAC,MAAM;UACD,IAAI,EAAC,YAAY;UACjB,KAAK,EAAER,MAAM,CAACC,MAAM,CAACZ,UAAW;UAChC,OAAO,EAAC,kBAAkB;UAC1B,QAAQ,EAAEU,YAAa;UACvB,KAAK,EAAEC,MAAM,CAACS,OAAO,CAACpB,UAAU,IAAIqB,OAAO,CAACV,MAAM,CAACW,MAAM,CAACtB,UAAU,CAAE;UACtE,UAAU,EAAEW,MAAM,CAACS,OAAO,CAACpB,UAAU,IAAIW,MAAM,CAACW,MAAM,CAACtB,UAAW;UAAA,wBAElE,QAAC,QAAQ;YAAC,KAAK,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAkB,eAC1C,QAAC,QAAQ;YAAC,KAAK,EAAC,SAAS;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAmB,eAC5C,QAAC,QAAQ;YAAC,KAAK,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAyB;QAAA;UAAA;UAAA;UAAA;QAAA,QAC9C;MAAA;QAAA;QAAA;QAAA;MAAA,QACD,EACZ,CAACV,QAAQ,gBACX,QAAC,QAAQ;QAAA,wBACH,QAAC,SAAS;UACJ,IAAI,EAAC,QAAQ;UACb,OAAO,EAAC,UAAU;UAClB,IAAI,EAAC,YAAY;UACjB,YAAY,EAAEqB,MAAM,CAACC,MAAM,CAACT,UAAW;UACvC,QAAQ,EAAEQ,MAAM,CAACE,YAAa;UAC9B,KAAK,EAAEF,MAAM,CAACS,OAAO,CAACjB,UAAU,IAAIkB,OAAO,CAACV,MAAM,CAACW,MAAM,CAACnB,UAAU,CAAE;UACtE,UAAU,EAAEQ,MAAM,CAACS,OAAO,CAACjB,UAAU,IAAIQ,MAAM,CAACW,MAAM,CAACnB;QAAW;UAAA;UAAA;UAAA;QAAA,QACtE,eAEF,QAAC,MAAM;UACD,IAAI,EAAC,aAAa;UAClB,KAAK,EAAC,cAAc;UACpB,KAAK,EAAEQ,MAAM,CAACC,MAAM,CAACJ,WAAY;UACjC,QAAQ,EAAEG,MAAM,CAACE,YAAa;UAC9B,KAAK,EAAEF,MAAM,CAACS,OAAO,CAACZ,WAAW,IAAIa,OAAO,CAACV,MAAM,CAACW,MAAM,CAACd,WAAW,CAAE;UACxE,UAAU,EAAEG,MAAM,CAACS,OAAO,CAACZ,WAAW,IAAIG,MAAM,CAACW,MAAM,CAACd,WAAY;UAAA,wBAEpE,QAAC,QAAQ;YAAC,KAAK,EAAC,WAAW;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAsB,eACjD,QAAC,QAAQ;YAAC,KAAK,EAAC,UAAU;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAqB;QAAA;UAAA;UAAA;UAAA;QAAA,QAC5C;MAAA;QAAA;QAAA;QAAA;MAAA,QACJ,GAAG,IAAI,eAClB,QAAC,MAAM;QAAC,IAAI,EAAC,QAAQ;QAAC,OAAO,EAAC,WAAW;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC5D;EAAA;IAAA;IAAA;IAAA;EAAA,QACb;AAElB,CAAC;AAAA,GA3GKnB,SAAS;EAAA,QAKQd,WAAW,EA8BbW,SAAS;AAAA;AAAA,KAnCxBG,SAAS;AA6Gf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}