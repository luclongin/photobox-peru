{"ast":null,"code":"var _jsxFileName = \"/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik, useFormikContext } from 'formik';\nimport { FormControl } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MyField = props => {\n  _s();\n  const {\n    values: {\n      phraseType\n    },\n    touched,\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(props);\n  React.useEffect(() => {\n    // set the value of textC, based on textA and textB\n    if (phraseType !== '' && touched.phraseType) {\n      setHidden(false);\n      setFieldValue(props.name, `textA: ${textA}, textB: ${textB}`);\n    }\n  }, [textB, textA, touched.textA, touched.textB, setFieldValue, props.name]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...props,\n      ...field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this), !!meta.touched && !!meta.error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true);\n};\n_s(MyField, \"T859ZCSbXFZdpNhFKTuo/rsu8aI=\", true, function () {\n  return [useFormikContext];\n});\n_c = MyField;\nconst AddPhrase = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 13\n  }, this);\n};\n_c2 = AddPhrase;\nexport default AddPhrase;\n/*const AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const handleSelectChange = (e) => {\n            setSelectedPhrase(e.target.value);\n            setDisabled(false);\n      }\n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required(),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Enter Text')*/\n//.matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n/* .required('Required')\n}),\nphraseColor: yup\n.string()\n.when(\"phraseType\", {\nis: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\nthen: yup.string('Choose Color').oneOf(\n ['lightWood', 'darkWood'],\n 'Color required')\n .required('Required')\n}),\n});\nuseEffect(() => {\n(selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n//validationSchema.fields.phraseType. selectedPhrase;\nconsole.log(this.props.values.phraseType);\n}, [selectedPhrase]);\nconst formik = useFormik({\ninitialValues: {\nphraseType: '',\nphraseText: '',\nphraseColor: defaultPhraseColor\n},\nvalidationSchema: validationSchema,\nonSubmit: (values) => {\nalert(JSON.stringify(values, null, 2));\n},\n});\n*/ /*setTimeout(() => {\n       values.phraseType = selectedPhrase;\n        if(values.phraseType === 'custom') {\n             dispatch(customPhraseAdded({\n                   text: values.phraseText,\n                   color: values.phraseColor\n             }));\n       } else {\n             // default chosen\n             dispatch(defaultPhraseAdded({\n                   defaultPhrase: values.phraseType\n             }));\n       }\n       alert(JSON.stringify(values, null, 2));\n       setSubmitting(false);\n   }, 400);*/ /*\n              return(\n              <div>\n              <h1>Add Phrase</h1>\n              <form onSubmit={formik.handleSubmit}>\n                <FormControl fullWidth>\n                      <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                      <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                            <MenuItem value=\"family\">Family</MenuItem>      \n                            <MenuItem value=\"friends\">Friends</MenuItem>\n                            <MenuItem value=\"custom\">Personalizado</MenuItem> \n                      </Select>\n                </FormControl>\n                {// !isHidden ? \n                      <Fragment>\n                            <TextField\n                                  label=\"Choose Text...\"\n                                  variant=\"outlined\"\n                                  value={formik.values.phraseText}\n                                  onChange={formik.handleChange}\n                                  error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                  helperText={formik.touched.phraseText && formik.errors.phraseText}\n                            />\n                            \n                            <Select\n                                  name=\"phraseColor\"\n                                  label=\"Choose Color\"\n                                  value={formik.values.phraseColor}\n                                  onChange={formik.handleChange}\n                                  error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                  helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                            >\n                                  <option value=\"lightWood\">Light Wood</option>      \n                                  <option value=\"darkWood\">Dark Wood</option>\n                            </Select>\n                      </Fragment>\n                //      : null\n                }\n                <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n              </form>\n              </div>\n              );\n              }\n              export default AddPhrase;*/\nvar _c, _c2;\n$RefreshReg$(_c, \"MyField\");\n$RefreshReg$(_c2, \"AddPhrase\");","map":{"version":3,"names":["React","useEffect","useState","Container","Box","InputLabel","Select","MenuItem","TextField","Button","Fragment","useDispatch","nextButtonEnabled","lightWoodBackground","darkWoodBackground","customPhraseAdded","defaultPhraseAdded","yup","Formik","Field","Form","ErrorMessage","useFormik","useFormikContext","FormControl","MyField","props","values","phraseType","touched","setFieldValue","field","meta","useField","setHidden","name","textA","textB","error","AddPhrase"],"sources":["/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik, useFormikContext} from 'formik';\nimport {FormControl} from \"@mui/material\";\n\nconst MyField = (props) => {\n      const {\n        values: { phraseType },\n        touched,\n        setFieldValue,\n      } = useFormikContext();\n      const [field, meta] = useField(props);\n    \n      React.useEffect(() => {\n        // set the value of textC, based on textA and textB\n        if (\n          phraseType !== '' &&\n          touched.phraseType\n        ) {\n          setHidden(false);\n          setFieldValue(props.name, `textA: ${textA}, textB: ${textB}`);\n        }\n      }, [textB, textA, touched.textA, touched.textB, setFieldValue, props.name]);\n    \n      return (\n        <>\n          <input {...props} {...field} />\n          {!!meta.touched && !!meta.error && <div>{meta.error}</div>}\n        </>\n      );\n    };\n\n\nconst AddPhrase = () => {\n\n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n            </div>\n      );\n}\n\nexport default AddPhrase;\n/*const AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const handleSelectChange = (e) => {\n            setSelectedPhrase(e.target.value);\n            setDisabled(false);\n      }\n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required(),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Enter Text')*/\n                                    //.matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n                                   /* .required('Required')\n                        }),\n            phraseColor: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Choose Color').oneOf(\n                                    ['lightWood', 'darkWood'],\n                                    'Color required')\n                                    .required('Required')\n                        }),\n      });\n\n      useEffect(() => {\n            (selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n            //validationSchema.fields.phraseType. selectedPhrase;\n            console.log(this.props.values.phraseType);\n      }, [selectedPhrase]);\n\n      const formik = useFormik({\n            initialValues: {\n                  phraseType: '',\n                  phraseText: '',\n                  phraseColor: defaultPhraseColor\n            },\n            validationSchema: validationSchema,\n            onSubmit: (values) => {\n                  alert(JSON.stringify(values, null, 2));\n            },\n      });\n                 */ /*setTimeout(() => {\n                        values.phraseType = selectedPhrase;\n\n                        if(values.phraseType === 'custom') {\n                              dispatch(customPhraseAdded({\n                                    text: values.phraseText,\n                                    color: values.phraseColor\n                              }));\n                        } else {\n                              // default chosen\n                              dispatch(defaultPhraseAdded({\n                                    defaultPhrase: values.phraseType\n                              }));\n                        }\n                        alert(JSON.stringify(values, null, 2));\n                        setSubmitting(false);\n                  }, 400);*//*\n            \n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n                  <form onSubmit={formik.handleSubmit}>\n                              <FormControl fullWidth>\n                                    <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                                    <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                                          <MenuItem value=\"family\">Family</MenuItem>      \n                                          <MenuItem value=\"friends\">Friends</MenuItem>\n                                          <MenuItem value=\"custom\">Personalizado</MenuItem> \n                                    </Select>\n                              </FormControl>\n                              {// !isHidden ? \n                                    <Fragment>\n                                          <TextField\n                                                label=\"Choose Text...\"\n                                                variant=\"outlined\"\n                                                value={formik.values.phraseText}\n                                                onChange={formik.handleChange}\n                                                error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                                helperText={formik.touched.phraseText && formik.errors.phraseText}\n                                          />\n                                          \n                                          <Select\n                                                name=\"phraseColor\"\n                                                label=\"Choose Color\"\n                                                value={formik.values.phraseColor}\n                                                onChange={formik.handleChange}\n                                                error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                                helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                                          >\n                                                <option value=\"lightWood\">Light Wood</option>      \n                                                <option value=\"darkWood\">Dark Wood</option>\n                                          </Select>\n                                    </Fragment>\n                              //      : null\n                              }\n                              <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n                        </form>\n            </div>\n      );\n}\n\nexport default AddPhrase;*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,SAAS,EAAEC,GAAG,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC/F,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,OAAOC,kBAAkB,MAAM,2BAA2B;AAC1D,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,uDAAuD;AAC7G,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,YAAY,EAAEC,SAAS,EAAEC,gBAAgB,QAAO,QAAQ;AACtF,SAAQC,WAAW,QAAO,eAAe;AAAC;AAAA;AAE1C,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAAA;EACrB,MAAM;IACJC,MAAM,EAAE;MAAEC;IAAW,CAAC;IACtBC,OAAO;IACPC;EACF,CAAC,GAAGP,gBAAgB,EAAE;EACtB,MAAM,CAACQ,KAAK,EAAEC,IAAI,CAAC,GAAGC,QAAQ,CAACP,KAAK,CAAC;EAErC1B,KAAK,CAACC,SAAS,CAAC,MAAM;IACpB;IACA,IACE2B,UAAU,KAAK,EAAE,IACjBC,OAAO,CAACD,UAAU,EAClB;MACAM,SAAS,CAAC,KAAK,CAAC;MAChBJ,aAAa,CAACJ,KAAK,CAACS,IAAI,EAAG,UAASC,KAAM,YAAWC,KAAM,EAAC,CAAC;IAC/D;EACF,CAAC,EAAE,CAACA,KAAK,EAAED,KAAK,EAAEP,OAAO,CAACO,KAAK,EAAEP,OAAO,CAACQ,KAAK,EAAEP,aAAa,EAAEJ,KAAK,CAACS,IAAI,CAAC,CAAC;EAE3E,oBACE;IAAA,wBACE;MAAA,GAAWT,KAAK;MAAA,GAAMK;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI,EAC9B,CAAC,CAACC,IAAI,CAACH,OAAO,IAAI,CAAC,CAACG,IAAI,CAACM,KAAK,iBAAI;MAAA,UAAMN,IAAI,CAACM;IAAK;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA,gBACzD;AAEP,CAAC;AAAC,GAzBAb,OAAO;EAAA,QAKHF,gBAAgB;AAAA;AAAA,KALpBE,OAAO;AA4Bb,MAAMc,SAAS,GAAG,MAAM;EAElB,oBACM;IAAA,uBACM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAmB;IAAA;IAAA;IAAA;EAAA,QACnB;AAElB,CAAC;AAAA,MAPKA,SAAS;AASf,eAAeA,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACD;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA5BmC,CA8Bf;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAfoB,CAgBQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3C4B;AAAA;AAAA"},"metadata":{},"sourceType":"module"}