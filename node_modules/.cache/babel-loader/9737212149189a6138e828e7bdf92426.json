{"ast":null,"code":"import { PixelCrop } from 'react-image-crop';\nconst TO_RADIANS = Math.PI / 180;\nexport async function canvasPreview(image, canvas, crop) {\n  let scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let rotate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    throw new Error('No 2d context');\n  }\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n  const pixelRatio = window.devicePixelRatio;\n  // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY;\n  const rotateRads = rotate * TO_RADIANS;\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n  ctx.save();\n\n  // 5) Move the crop origin to the canvas origin (0,0)\n  ctx.translate(-cropX, -cropY);\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY);\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads);\n  // 2) Scale the image\n  ctx.scale(scale, scale);\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n  ctx.restore();\n}","map":{"version":3,"names":["PixelCrop","TO_RADIANS","Math","PI","canvasPreview","image","canvas","crop","scale","rotate","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","drawImage","restore"],"sources":["/home/luc/Documents/photobox-peru/src/utils/canvasPreview.js"],"sourcesContent":["import { PixelCrop } from 'react-image-crop'\n\nconst TO_RADIANS = Math.PI / 180\n\nexport async function canvasPreview(\n  image,\n  canvas,\n  crop,\n  scale = 1,\n  rotate = 0,\n) {\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    throw new Error('No 2d context')\n  }\n\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n  const pixelRatio = window.devicePixelRatio\n  // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\n\n  ctx.scale(pixelRatio, pixelRatio)\n  ctx.imageSmoothingQuality = 'high'\n\n  const cropX = crop.x * scaleX\n  const cropY = crop.y * scaleY\n\n  const rotateRads = rotate * TO_RADIANS\n  const centerX = image.naturalWidth / 2\n  const centerY = image.naturalHeight / 2\n\n  ctx.save()\n\n  // 5) Move the crop origin to the canvas origin (0,0)\n  ctx.translate(-cropX, -cropY)\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY)\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads)\n  // 2) Scale the image\n  ctx.scale(scale, scale)\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY)\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n  )\n\n  ctx.restore()\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,UAAU,GAAGC,IAAI,CAACC,EAAE,GAAG,GAAG;AAEhC,OAAO,eAAeC,aAAa,CACjCC,KAAK,EACLC,MAAM,EACNC,IAAI,EAGJ;EAAA,IAFAC,KAAK,uEAAG,CAAC;EAAA,IACTC,MAAM,uEAAG,CAAC;EAEV,MAAMC,GAAG,GAAGJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC;EAEnC,IAAI,CAACD,GAAG,EAAE;IACR,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;EAClC;EAEA,MAAMC,MAAM,GAAGR,KAAK,CAACS,YAAY,GAAGT,KAAK,CAACU,KAAK;EAC/C,MAAMC,MAAM,GAAGX,KAAK,CAACY,aAAa,GAAGZ,KAAK,CAACa,MAAM;EACjD;EACA;EACA;EACA;EACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,gBAAgB;EAC1C;;EAEAf,MAAM,CAACS,KAAK,GAAGb,IAAI,CAACoB,KAAK,CAACf,IAAI,CAACQ,KAAK,GAAGF,MAAM,GAAGM,UAAU,CAAC;EAC3Db,MAAM,CAACY,MAAM,GAAGhB,IAAI,CAACoB,KAAK,CAACf,IAAI,CAACW,MAAM,GAAGF,MAAM,GAAGG,UAAU,CAAC;EAE7DT,GAAG,CAACF,KAAK,CAACW,UAAU,EAAEA,UAAU,CAAC;EACjCT,GAAG,CAACa,qBAAqB,GAAG,MAAM;EAElC,MAAMC,KAAK,GAAGjB,IAAI,CAACkB,CAAC,GAAGZ,MAAM;EAC7B,MAAMa,KAAK,GAAGnB,IAAI,CAACoB,CAAC,GAAGX,MAAM;EAE7B,MAAMY,UAAU,GAAGnB,MAAM,GAAGR,UAAU;EACtC,MAAM4B,OAAO,GAAGxB,KAAK,CAACS,YAAY,GAAG,CAAC;EACtC,MAAMgB,OAAO,GAAGzB,KAAK,CAACY,aAAa,GAAG,CAAC;EAEvCP,GAAG,CAACqB,IAAI,EAAE;;EAEV;EACArB,GAAG,CAACsB,SAAS,CAAC,CAACR,KAAK,EAAE,CAACE,KAAK,CAAC;EAC7B;EACAhB,GAAG,CAACsB,SAAS,CAACH,OAAO,EAAEC,OAAO,CAAC;EAC/B;EACApB,GAAG,CAACD,MAAM,CAACmB,UAAU,CAAC;EACtB;EACAlB,GAAG,CAACF,KAAK,CAACA,KAAK,EAAEA,KAAK,CAAC;EACvB;EACAE,GAAG,CAACsB,SAAS,CAAC,CAACH,OAAO,EAAE,CAACC,OAAO,CAAC;EACjCpB,GAAG,CAACuB,SAAS,CACX5B,KAAK,EACL,CAAC,EACD,CAAC,EACDA,KAAK,CAACS,YAAY,EAClBT,KAAK,CAACY,aAAa,EACnB,CAAC,EACD,CAAC,EACDZ,KAAK,CAACS,YAAY,EAClBT,KAAK,CAACY,aAAa,CACpB;EAEDP,GAAG,CAACwB,OAAO,EAAE;AACf"},"metadata":{},"sourceType":"module"}