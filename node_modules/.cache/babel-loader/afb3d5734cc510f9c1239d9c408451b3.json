{"ast":null,"code":"var _jsxFileName = \"/home/luc/Documents/photobox-peru/src/components/uploadPhotoDialog/uploadPhotoDialog.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport Cropper from 'react-easy-crop';\nimport { Slider, Button, Typography } from '@mui/material';\nimport styled from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPhotoDialog = () => {\n  _s();\n  const dogImg = 'https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000';\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [rotation, setRotation] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  const showCroppedImage = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(dogImg, croppedAreaPixels, rotation);\n      console.log('donee', {\n        croppedImage\n      });\n      setCroppedImage(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, rotation]);\n  const onClose = useCallback(() => {\n    setCroppedImage(null);\n  }, []);\n  const CropContainer = styled(\"div\")(_ref => {\n    let {\n      theme\n    } = _ref;\n    return {\n      backgroundColor: 'red'\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CropContainer, {\n      children: /*#__PURE__*/_jsxDEV(Cropper, {\n        image: dogImg,\n        crop: crop,\n        rotation: rotation,\n        zoom: zoom,\n        aspect: 4 / 3,\n        onCropChange: setCrop,\n        onRotationChange: setRotation,\n        onCropComplete: onCropComplete,\n        onZoomChange: setZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 13\n  }, this);\n};\n_s(UploadPhotoDialog, \"Fr1RVbqZUmbiofVjBHburGzlXek=\");\n_c = UploadPhotoDialog;\nexport default UploadPhotoDialog;\n\n/*\nimport React, { useState, useCallback } from 'react'\nimport ReactDOM from 'react-dom'\nimport Cropper from 'react-easy-crop'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { withStyles } from '@material-ui/core/styles'\nimport ImgDialog from './ImgDialog'\nimport getCroppedImg from './cropImage'\nimport { styles } from './styles'\n\n\n\n  return (\n    <div>\n      <div className={classes.cropContainer}>\n        <Cropper\n          image={dogImg}\n          crop={crop}\n          rotation={rotation}\n          zoom={zoom}\n          aspect={4 / 3}\n          onCropChange={setCrop}\n          onRotationChange={setRotation}\n          onCropComplete={onCropComplete}\n          onZoomChange={setZoom}\n        />\n      </div>\n      <div className={classes.controls}>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Zoom\n          </Typography>\n          <Slider\n            value={zoom}\n            min={1}\n            max={3}\n            step={0.1}\n            aria-labelledby=\"Zoom\"\n            classes={{ root: classes.slider }}\n            onChange={(e, zoom) => setZoom(zoom)}\n          />\n        </div>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Rotation\n          </Typography>\n          <Slider\n            value={rotation}\n            min={0}\n            max={360}\n            step={1}\n            aria-labelledby=\"Rotation\"\n            classes={{ root: classes.slider }}\n            onChange={(e, rotation) => setRotation(rotation)}\n          />\n        </div>\n        <Button\n          onClick={showCroppedImage}\n          variant=\"contained\"\n          color=\"primary\"\n          classes={{ root: classes.cropButton }}\n        >\n          Show Result\n        </Button>\n      </div>\n      <ImgDialog img={croppedImage} onClose={onClose} />\n    </div>\n  )\n}\n\nconst StyledDemo = withStyles(styles)(Demo)\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<StyledDemo />, rootElement)\n\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"UploadPhotoDialog\");","map":{"version":3,"names":["React","useState","useCallback","Cropper","Slider","Button","Typography","styled","UploadPhotoDialog","dogImg","crop","setCrop","x","y","rotation","setRotation","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","onCropComplete","croppedArea","showCroppedImage","getCroppedImg","console","log","e","error","onClose","CropContainer","theme","backgroundColor"],"sources":["/home/luc/Documents/photobox-peru/src/components/uploadPhotoDialog/uploadPhotoDialog.component.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport Cropper from 'react-easy-crop'\nimport { Slider, Button, Typography } from '@mui/material';\nimport styled from '@mui/material';\n\nconst UploadPhotoDialog = () => {\n      const dogImg =\n      'https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000'\n\n      const [crop, setCrop] = useState({ x: 0, y: 0 });\n      const [rotation, setRotation] = useState(0);\n      const [zoom, setZoom] = useState(1);\n      const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n      const [croppedImage, setCroppedImage] = useState(null);\n\n      const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n      setCroppedAreaPixels(croppedAreaPixels);\n      }, [])\n\n      const showCroppedImage = useCallback(async () => {\n      try {\n            const croppedImage = await getCroppedImg(\n            dogImg,\n            croppedAreaPixels,\n            rotation\n            )\n            console.log('donee', { croppedImage });\n            setCroppedImage(croppedImage);\n      } catch (e) {\n            console.error(e);\n      }\n      }, [croppedAreaPixels, rotation])\n\n      const onClose = useCallback(() => {\n      setCroppedImage(null)\n      }, []);\n\n      const CropContainer = styled(\"div\") (({theme}) => ({\n            backgroundColor: 'red'\n      }))\n      \n\n      return(\n            <div>\n                  <CropContainer>\n                  <Cropper\n                        image={dogImg}\n                        crop={crop}\n                        rotation={rotation}\n                        zoom={zoom}\n                        aspect={4 / 3}\n                        onCropChange={setCrop}\n                        onRotationChange={setRotation}\n                        onCropComplete={onCropComplete}\n                        onZoomChange={setZoom}\n                  />   \n                  </CropContainer>\n            </div>\n      );\n}\n\nexport default UploadPhotoDialog;\n\n/*\nimport React, { useState, useCallback } from 'react'\nimport ReactDOM from 'react-dom'\nimport Cropper from 'react-easy-crop'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { withStyles } from '@material-ui/core/styles'\nimport ImgDialog from './ImgDialog'\nimport getCroppedImg from './cropImage'\nimport { styles } from './styles'\n\n\n\n  return (\n    <div>\n      <div className={classes.cropContainer}>\n        <Cropper\n          image={dogImg}\n          crop={crop}\n          rotation={rotation}\n          zoom={zoom}\n          aspect={4 / 3}\n          onCropChange={setCrop}\n          onRotationChange={setRotation}\n          onCropComplete={onCropComplete}\n          onZoomChange={setZoom}\n        />\n      </div>\n      <div className={classes.controls}>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Zoom\n          </Typography>\n          <Slider\n            value={zoom}\n            min={1}\n            max={3}\n            step={0.1}\n            aria-labelledby=\"Zoom\"\n            classes={{ root: classes.slider }}\n            onChange={(e, zoom) => setZoom(zoom)}\n          />\n        </div>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Rotation\n          </Typography>\n          <Slider\n            value={rotation}\n            min={0}\n            max={360}\n            step={1}\n            aria-labelledby=\"Rotation\"\n            classes={{ root: classes.slider }}\n            onChange={(e, rotation) => setRotation(rotation)}\n          />\n        </div>\n        <Button\n          onClick={showCroppedImage}\n          variant=\"contained\"\n          color=\"primary\"\n          classes={{ root: classes.cropButton }}\n        >\n          Show Result\n        </Button>\n      </div>\n      <ImgDialog img={croppedImage} onClose={onClose} />\n    </div>\n  )\n}\n\nconst StyledDemo = withStyles(styles)(Demo)\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<StyledDemo />, rootElement)\n\n\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,OAAO,MAAM,iBAAiB;AACrC,SAASC,MAAM,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AAC1D,OAAOC,MAAM,MAAM,eAAe;AAAC;AAEnC,MAAMC,iBAAiB,GAAG,MAAM;EAAA;EAC1B,MAAMC,MAAM,GACZ,mGAAmG;EAEnG,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAAEW,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACiB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMqB,cAAc,GAAGpB,WAAW,CAAC,CAACqB,WAAW,EAAEL,iBAAiB,KAAK;IACvEC,oBAAoB,CAACD,iBAAiB,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,gBAAgB,GAAGtB,WAAW,CAAC,YAAY;IACjD,IAAI;MACE,MAAMkB,YAAY,GAAG,MAAMK,aAAa,CACxChB,MAAM,EACNS,iBAAiB,EACjBJ,QAAQ,CACP;MACDY,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE;QAAEP;MAAa,CAAC,CAAC;MACtCC,eAAe,CAACD,YAAY,CAAC;IACnC,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACNF,OAAO,CAACG,KAAK,CAACD,CAAC,CAAC;IACtB;EACA,CAAC,EAAE,CAACV,iBAAiB,EAAEJ,QAAQ,CAAC,CAAC;EAEjC,MAAMgB,OAAO,GAAG5B,WAAW,CAAC,MAAM;IAClCmB,eAAe,CAAC,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,aAAa,GAAGxB,MAAM,CAAC,KAAK,CAAC,CAAE;IAAA,IAAC;MAACyB;IAAK,CAAC;IAAA,OAAM;MAC7CC,eAAe,EAAE;IACvB,CAAC;EAAA,CAAC,CAAC;EAGH,oBACM;IAAA,uBACM,QAAC,aAAa;MAAA,uBACd,QAAC,OAAO;QACF,KAAK,EAAExB,MAAO;QACd,IAAI,EAAEC,IAAK;QACX,QAAQ,EAAEI,QAAS;QACnB,IAAI,EAAEE,IAAK;QACX,MAAM,EAAE,CAAC,GAAG,CAAE;QACd,YAAY,EAAEL,OAAQ;QACtB,gBAAgB,EAAEI,WAAY;QAC9B,cAAc,EAAEO,cAAe;QAC/B,YAAY,EAAEL;MAAQ;QAAA;QAAA;QAAA;MAAA;IAC1B;MAAA;MAAA;MAAA;IAAA;EACc;IAAA;IAAA;IAAA;EAAA,QAChB;AAElB,CAAC;AAAA,GAtDKT,iBAAiB;AAAA,KAAjBA,iBAAiB;AAwDvB,eAAeA,iBAAiB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAAA"},"metadata":{},"sourceType":"module"}