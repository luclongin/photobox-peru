{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = [];\nexport const defaultPhrases = {\n  \"family\": {\n    text: \"Family\",\n    color: \"brown\"\n  },\n  \"friends\": {\n    text: \"Friends\",\n    color: \"wood\"\n  }\n};\nconst AdditionalPhraseSlice = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {\n    customPhraseAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(text, color) {\n        return {\n          payload: {\n            id: nanoid(),\n            text,\n            color\n          }\n        };\n      }\n    },\n    // adding default phrase data from dictionary\n    defaultPhraseAdded(state, action) {\n      console.log(\"start\");\n      const {\n        defaultPhrase\n      } = action.payload;\n      const {\n        text,\n        color\n      } = defaultPhrases[defaultPhrase];\n      console.log(\"defaulText: \", text);\n      state.push({\n        id: nanoid(),\n        text: text,\n        color: color\n      });\n    },\n    phraseDeleted(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingPhrase = state.find(phrase => phrase.id === id);\n      const idx = state.indexOf(existingPhrase);\n      state.splice(idx, 1);\n    },\n    allPhrasesDeleted(state) {\n      return [];\n    }\n  }\n});\nexport const {\n  customPhraseAdded,\n  defaultPhraseAdded,\n  phraseDeleted,\n  allPhrasesDeleted\n} = AdditionalPhraseSlice.actions;\nexport default AdditionalPhraseSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","defaultPhrases","text","color","AdditionalPhraseSlice","name","reducers","customPhraseAdded","reducer","state","action","push","payload","prepare","id","defaultPhraseAdded","console","log","defaultPhrase","phraseDeleted","existingPhrase","find","phrase","idx","indexOf","splice","allPhrasesDeleted","actions"],"sources":["/home/luc/Documents/photobox-peru/src/features/additionalPhrase/AdditionalPhraseSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nexport const defaultPhrases = {\n      \"family\": {\n            text: \"Family\",\n            color: \"brown\"\n      },\n      \"friends\": {\n            text: \"Friends\",\n            color: \"wood\"\n      }\n};\n\nconst AdditionalPhraseSlice = createSlice({\n      name: 'photos',\n      initialState,\n      reducers: {\n            customPhraseAdded: {\n                  reducer(state, action) {\n                        state.push(action.payload)\n                  },\n                  prepare(text, color) {\n                        return {\n                              payload: {\n                                    id: nanoid(),\n                                    text,\n                                    color\n                              }\n                        }\n                  }\n            },\n            // adding default phrase data from dictionary\n            defaultPhraseAdded(state, action) {\n                  console.log(\"start\");\n                  const {defaultPhrase} = action.payload;\n                  const {text, color} = defaultPhrases[defaultPhrase];\n                  console.log(\"defaulText: \", text);\n                  state.push({\n                        id: nanoid(),\n                        text: text,\n                        color: color\n                  });\n            },\n            phraseDeleted(state, action) {\n                  const {id} = action.payload;\n                  const existingPhrase = state.find(phrase => phrase.id === id);\n                  const idx = state.indexOf(existingPhrase);\n                  state.splice(idx, 1);\n            },\n            allPhrasesDeleted(state) {\n                  return []\n            }\n      }\n})\n\nexport const {\n            customPhraseAdded,\n            defaultPhraseAdded,\n            phraseDeleted,\n            allPhrasesDeleted\n      } = AdditionalPhraseSlice.actions;\n\n\nexport default AdditionalPhraseSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAEtD,MAAMC,YAAY,GAAG,EAAE;AAEvB,OAAO,MAAMC,cAAc,GAAG;EACxB,QAAQ,EAAE;IACJC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE;EACb,CAAC;EACD,SAAS,EAAE;IACLD,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE;EACb;AACN,CAAC;AAED,MAAMC,qBAAqB,GAAGN,WAAW,CAAC;EACpCO,IAAI,EAAE,QAAQ;EACdL,YAAY;EACZM,QAAQ,EAAE;IACJC,iBAAiB,EAAE;MACbC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;QACjBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAChC,CAAC;MACDC,OAAO,CAACX,IAAI,EAAEC,KAAK,EAAE;QACf,OAAO;UACDS,OAAO,EAAE;YACHE,EAAE,EAAEf,MAAM,EAAE;YACZG,IAAI;YACJC;UACN;QACN,CAAC;MACP;IACN,CAAC;IACD;IACAY,kBAAkB,CAACN,KAAK,EAAEC,MAAM,EAAE;MAC5BM,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB,MAAM;QAACC;MAAa,CAAC,GAAGR,MAAM,CAACE,OAAO;MACtC,MAAM;QAACV,IAAI;QAAEC;MAAK,CAAC,GAAGF,cAAc,CAACiB,aAAa,CAAC;MACnDF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEf,IAAI,CAAC;MACjCO,KAAK,CAACE,IAAI,CAAC;QACLG,EAAE,EAAEf,MAAM,EAAE;QACZG,IAAI,EAAEA,IAAI;QACVC,KAAK,EAAEA;MACb,CAAC,CAAC;IACR,CAAC;IACDgB,aAAa,CAACV,KAAK,EAAEC,MAAM,EAAE;MACvB,MAAM;QAACI;MAAE,CAAC,GAAGJ,MAAM,CAACE,OAAO;MAC3B,MAAMQ,cAAc,GAAGX,KAAK,CAACY,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACR,EAAE,KAAKA,EAAE,CAAC;MAC7D,MAAMS,GAAG,GAAGd,KAAK,CAACe,OAAO,CAACJ,cAAc,CAAC;MACzCX,KAAK,CAACgB,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC1B,CAAC;IACDG,iBAAiB,CAACjB,KAAK,EAAE;MACnB,OAAO,EAAE;IACf;EACN;AACN,CAAC,CAAC;AAEF,OAAO,MAAM;EACDF,iBAAiB;EACjBQ,kBAAkB;EAClBI,aAAa;EACbO;AACN,CAAC,GAAGtB,qBAAqB,CAACuB,OAAO;AAGvC,eAAevB,qBAAqB,CAACI,OAAO"},"metadata":{},"sourceType":"module"}