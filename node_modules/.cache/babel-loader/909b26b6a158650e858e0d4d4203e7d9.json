{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst photoSlice = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {\n    photoAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(imgDimensions) {\n        return {\n          payload: {\n            id: nanoid(),\n            imgSrc: null,\n            imgResult: null,\n            imgDimensions\n          }\n        };\n      }\n    },\n    photoUpdatedSrc(state, action) {\n      const {\n        id,\n        imgSrc\n      } = action.payload;\n      const existingPhoto = state.find(photo => photo.id === id);\n      if (existingPhoto) {\n        existingPhoto.imgSrc = imgSrc;\n        existingPhoto.imgResult = imgSrc;\n      }\n    },\n    photoUpdatedResult(state, action) {\n      const {\n        id,\n        imgResult\n      } = action.payload;\n      const existingPhoto = state.find(photo => photo.id === id);\n      if (existingPhoto) {\n        existingPhoto.imgResult = imgResult;\n      }\n    },\n    photoDeleted(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingPhoto = state.find(photo => photo.id === id);\n      const idx = state.indexOf(existingPhoto);\n      state.splice(idx, 1);\n    },\n    allPhotosDeleted(state) {\n      state = [];\n    }\n  }\n});\nexport const {\n  photoAdded,\n  photoUpdatedSrc,\n  photoUpdatedResult,\n  photoDeleted,\n  allPhotosDeleted\n} = photoSlice.actions;\nexport default photoSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","photoSlice","name","reducers","photoAdded","reducer","state","action","push","payload","prepare","imgDimensions","id","imgSrc","imgResult","photoUpdatedSrc","existingPhoto","find","photo","photoUpdatedResult","photoDeleted","idx","indexOf","splice","allPhotosDeleted","actions"],"sources":["/home/luc/Documents/photobox-peru/src/features/photoEdition/PhotoSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n\nconst initialState = []\n\nconst photoSlice = createSlice({\n      name: 'photos',\n      initialState,\n      reducers: {\n            photoAdded: {\n                  reducer(state, action) {\n                        state.push(action.payload)\n                  },\n                  prepare(imgDimensions) {\n                        return {\n                              payload: {\n                                    id: nanoid(),\n                                    imgSrc: null,\n                                    imgResult: null,\n                                    imgDimensions\n                              }\n                        }\n                  }\n            },\n            photoUpdatedSrc(state, action) {\n                  const {id, imgSrc} = action.payload;\n                  const existingPhoto = state.find(photo => photo.id === id);\n                  if(existingPhoto) {\n                        existingPhoto.imgSrc = imgSrc;\n                        existingPhoto.imgResult = imgSrc;\n                  }\n            },\n            photoUpdatedResult(state, action) {\n                  const {id, imgResult} = action.payload;\n                  const existingPhoto = state.find(photo => photo.id === id);\n                  if(existingPhoto) {\n                        existingPhoto.imgResult = imgResult;\n                  } \n            },\n            photoDeleted(state, action) {\n                  const {id} = action.payload;\n                  const existingPhoto = state.find(photo => photo.id === id);\n                  const idx = state.indexOf(existingPhoto);\n                  state.splice(idx, 1);\n            },\n            allPhotosDeleted(state) {\n                  state = []\n            }\n      }\n})\n\nexport const {\n            photoAdded,\n            photoUpdatedSrc,\n            photoUpdatedResult,\n            photoDeleted,\n            allPhotosDeleted\n      } = photoSlice.actions;\n\n\nexport default photoSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAEtD,MAAMC,YAAY,GAAG,EAAE;AAEvB,MAAMC,UAAU,GAAGH,WAAW,CAAC;EACzBI,IAAI,EAAE,QAAQ;EACdF,YAAY;EACZG,QAAQ,EAAE;IACJC,UAAU,EAAE;MACNC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;QACjBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAChC,CAAC;MACDC,OAAO,CAACC,aAAa,EAAE;QACjB,OAAO;UACDF,OAAO,EAAE;YACHG,EAAE,EAAEb,MAAM,EAAE;YACZc,MAAM,EAAE,IAAI;YACZC,SAAS,EAAE,IAAI;YACfH;UACN;QACN,CAAC;MACP;IACN,CAAC;IACDI,eAAe,CAACT,KAAK,EAAEC,MAAM,EAAE;MACzB,MAAM;QAACK,EAAE;QAAEC;MAAM,CAAC,GAAGN,MAAM,CAACE,OAAO;MACnC,MAAMO,aAAa,GAAGV,KAAK,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC;MAC1D,IAAGI,aAAa,EAAE;QACZA,aAAa,CAACH,MAAM,GAAGA,MAAM;QAC7BG,aAAa,CAACF,SAAS,GAAGD,MAAM;MACtC;IACN,CAAC;IACDM,kBAAkB,CAACb,KAAK,EAAEC,MAAM,EAAE;MAC5B,MAAM;QAACK,EAAE;QAAEE;MAAS,CAAC,GAAGP,MAAM,CAACE,OAAO;MACtC,MAAMO,aAAa,GAAGV,KAAK,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC;MAC1D,IAAGI,aAAa,EAAE;QACZA,aAAa,CAACF,SAAS,GAAGA,SAAS;MACzC;IACN,CAAC;IACDM,YAAY,CAACd,KAAK,EAAEC,MAAM,EAAE;MACtB,MAAM;QAACK;MAAE,CAAC,GAAGL,MAAM,CAACE,OAAO;MAC3B,MAAMO,aAAa,GAAGV,KAAK,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC;MAC1D,MAAMS,GAAG,GAAGf,KAAK,CAACgB,OAAO,CAACN,aAAa,CAAC;MACxCV,KAAK,CAACiB,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC1B,CAAC;IACDG,gBAAgB,CAAClB,KAAK,EAAE;MAClBA,KAAK,GAAG,EAAE;IAChB;EACN;AACN,CAAC,CAAC;AAEF,OAAO,MAAM;EACDF,UAAU;EACVW,eAAe;EACfI,kBAAkB;EAClBC,YAAY;EACZI;AACN,CAAC,GAAGvB,UAAU,CAACwB,OAAO;AAG5B,eAAexB,UAAU,CAACI,OAAO"},"metadata":{},"sourceType":"module"}