{"ast":null,"code":"var _jsxFileName = \"/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik, useFormikContext } from 'formik';\nimport { FormControl } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddPhrase = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [isHidden, setHidden] = useState(true);\n  const defaultPhraseColor = 'lightWood';\n  const [selectedPhrase, setSelectedPhrase] = useState('');\n  const [isDisabled, setDisabled] = useState(true);\n  const dispatch = useDispatch();\n  const handleSelectChange = e => {\n    setSelectedPhrase(e.target.value);\n    setDisabled(false);\n  };\n  const formik = useFormik({\n    initialValues: {\n      phraseText: '',\n      phraseColor: defaultPhraseColor\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  const MyField = props => {\n    _s();\n    const {\n      values: {\n        phraseType\n      },\n      touched\n    } = useFormikContext();\n    const [field, meta] = useField(props);\n    React.useEffect(() => {\n      // set the value of textC, based on textA and textB\n      if (phraseType !== '' && touched.phraseType) {\n        setHidden(false);\n        setSelectedPhrase(phraseType);\n      }\n    }, [phraseType, touched.phraseType, props.name]);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        ...props,\n        ...field\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), !!meta.touched && !!meta.error && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 52\n      }, this)]\n    }, void 0, true);\n  };\n  _s(MyField, \"GGvh7t32lDxxNQdEN1YXXGKbRtU=\", true, function () {\n    return [useFormikContext];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 13\n  }, this);\n};\n_s2(AddPhrase, \"0i9m+3tspmKJEeVwnxwSe9T3K6c=\", false, function () {\n  return [useDispatch, useFormik];\n});\n_c = AddPhrase;\nexport default AddPhrase;\n/*const AddPhrase = () => {\n      \n\n      \n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required(),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Enter Text')*/\n//.matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n/* .required('Required')\n}),\nphraseColor: yup\n.string()\n.when(\"phraseType\", {\nis: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\nthen: yup.string('Choose Color').oneOf(\n ['lightWood', 'darkWood'],\n 'Color required')\n .required('Required')\n}),\n});\nuseEffect(() => {\n(selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n//validationSchema.fields.phraseType. selectedPhrase;\nconsole.log(this.props.values.phraseType);\n}, [selectedPhrase]);\n*/ /*setTimeout(() => {\n       values.phraseType = selectedPhrase;\n        if(values.phraseType === 'custom') {\n             dispatch(customPhraseAdded({\n                   text: values.phraseText,\n                   color: values.phraseColor\n             }));\n       } else {\n             // default chosen\n             dispatch(defaultPhraseAdded({\n                   defaultPhrase: values.phraseType\n             }));\n       }\n       alert(JSON.stringify(values, null, 2));\n       setSubmitting(false);\n   }, 400);*/ /*\n              return(\n              <div>\n              <h1>Add Phrase</h1>\n              <form onSubmit={formik.handleSubmit}>\n                <FormControl fullWidth>\n                      <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                      <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                            <MenuItem value=\"family\">Family</MenuItem>      \n                            <MenuItem value=\"friends\">Friends</MenuItem>\n                            <MenuItem value=\"custom\">Personalizado</MenuItem> \n                      </Select>\n                </FormControl>\n                {// !isHidden ? \n                      <Fragment>\n                            <TextField\n                                  label=\"Choose Text...\"\n                                  variant=\"outlined\"\n                                  value={formik.values.phraseText}\n                                  onChange={formik.handleChange}\n                                  error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                  helperText={formik.touched.phraseText && formik.errors.phraseText}\n                            />\n                            \n                            <Select\n                                  name=\"phraseColor\"\n                                  label=\"Choose Color\"\n                                  value={formik.values.phraseColor}\n                                  onChange={formik.handleChange}\n                                  error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                  helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                            >\n                                  <option value=\"lightWood\">Light Wood</option>      \n                                  <option value=\"darkWood\">Dark Wood</option>\n                            </Select>\n                      </Fragment>\n                //      : null\n                }\n                <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n              </form>\n              </div>\n              );\n              }\n              export default AddPhrase;*/\nvar _c;\n$RefreshReg$(_c, \"AddPhrase\");","map":{"version":3,"names":["React","useEffect","useState","Container","Box","InputLabel","Select","MenuItem","TextField","Button","Fragment","useDispatch","nextButtonEnabled","lightWoodBackground","darkWoodBackground","customPhraseAdded","defaultPhraseAdded","yup","Formik","Field","Form","ErrorMessage","useFormik","useFormikContext","FormControl","AddPhrase","isHidden","setHidden","defaultPhraseColor","selectedPhrase","setSelectedPhrase","isDisabled","setDisabled","dispatch","handleSelectChange","e","target","value","formik","initialValues","phraseText","phraseColor","validationSchema","onSubmit","values","alert","JSON","stringify","MyField","props","phraseType","touched","field","meta","useField","name","error"],"sources":["/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik, useFormikContext} from 'formik';\nimport {FormControl} from \"@mui/material\";\n\n\n\n\nconst AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const handleSelectChange = (e) => {\n            setSelectedPhrase(e.target.value);\n            setDisabled(false);\n      }\n\n      const formik = useFormik({\n            initialValues: {\n                  phraseText: '',\n                  phraseColor: defaultPhraseColor\n            },\n            validationSchema: validationSchema,\n            onSubmit: (values) => {\n                  alert(JSON.stringify(values, null, 2));\n            },\n      });\n\n      const MyField = (props) => {\n            const {\n              values: { phraseType },\n              touched,\n            } = useFormikContext();\n            const [field, meta] = useField(props);\n          \n            React.useEffect(() => {\n              // set the value of textC, based on textA and textB\n              if (\n                phraseType !== '' &&\n                touched.phraseType\n              ) {\n                  setHidden(false);\n                  setSelectedPhrase(phraseType);\n                  \n              }\n            }, [phraseType, touched.phraseType, props.name]);\n          \n            return (\n              <>\n                <TextField {...props} {...field} />\n                {!!meta.touched && !!meta.error && <div>{meta.error}</div>}\n              </>\n            );\n          };\n      \n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n            </div>\n      );\n}\n\nexport default AddPhrase;\n/*const AddPhrase = () => {\n      \n\n      \n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required(),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Enter Text')*/\n                                    //.matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n                                   /* .required('Required')\n                        }),\n            phraseColor: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Choose Color').oneOf(\n                                    ['lightWood', 'darkWood'],\n                                    'Color required')\n                                    .required('Required')\n                        }),\n      });\n\n      useEffect(() => {\n            (selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n            //validationSchema.fields.phraseType. selectedPhrase;\n            console.log(this.props.values.phraseType);\n      }, [selectedPhrase]);\n\n      \n                 */ /*setTimeout(() => {\n                        values.phraseType = selectedPhrase;\n\n                        if(values.phraseType === 'custom') {\n                              dispatch(customPhraseAdded({\n                                    text: values.phraseText,\n                                    color: values.phraseColor\n                              }));\n                        } else {\n                              // default chosen\n                              dispatch(defaultPhraseAdded({\n                                    defaultPhrase: values.phraseType\n                              }));\n                        }\n                        alert(JSON.stringify(values, null, 2));\n                        setSubmitting(false);\n                  }, 400);*//*\n            \n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n                  <form onSubmit={formik.handleSubmit}>\n                              <FormControl fullWidth>\n                                    <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                                    <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                                          <MenuItem value=\"family\">Family</MenuItem>      \n                                          <MenuItem value=\"friends\">Friends</MenuItem>\n                                          <MenuItem value=\"custom\">Personalizado</MenuItem> \n                                    </Select>\n                              </FormControl>\n                              {// !isHidden ? \n                                    <Fragment>\n                                          <TextField\n                                                label=\"Choose Text...\"\n                                                variant=\"outlined\"\n                                                value={formik.values.phraseText}\n                                                onChange={formik.handleChange}\n                                                error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                                helperText={formik.touched.phraseText && formik.errors.phraseText}\n                                          />\n                                          \n                                          <Select\n                                                name=\"phraseColor\"\n                                                label=\"Choose Color\"\n                                                value={formik.values.phraseColor}\n                                                onChange={formik.handleChange}\n                                                error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                                helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                                          >\n                                                <option value=\"lightWood\">Light Wood</option>      \n                                                <option value=\"darkWood\">Dark Wood</option>\n                                          </Select>\n                                    </Fragment>\n                              //      : null\n                              }\n                              <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n                        </form>\n            </div>\n      );\n}\n\nexport default AddPhrase;*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,SAAS,EAAEC,GAAG,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC/F,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,OAAOC,kBAAkB,MAAM,2BAA2B;AAC1D,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,uDAAuD;AAC7G,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,YAAY,EAAEC,SAAS,EAAEC,gBAAgB,QAAO,QAAQ;AACtF,SAAQC,WAAW,QAAO,eAAe;AAAC;AAAA;AAK1C,MAAMC,SAAS,GAAG,MAAM;EAAA;EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM0B,kBAAkB,GAAG,WAAW;EACtC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC6B,UAAU,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM+B,QAAQ,GAAGtB,WAAW,EAAE;EAE9B,MAAMuB,kBAAkB,GAAIC,CAAC,IAAK;IAC5BL,iBAAiB,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACjCL,WAAW,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMM,MAAM,GAAGhB,SAAS,CAAC;IACnBiB,aAAa,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAEb;IACnB,CAAC;IACDc,gBAAgB,EAAEA,gBAAgB;IAClCC,QAAQ,EAAGC,MAAM,IAAK;MAChBC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5C;EACN,CAAC,CAAC;EAEF,MAAMI,OAAO,GAAIC,KAAK,IAAK;IAAA;IACrB,MAAM;MACJL,MAAM,EAAE;QAAEM;MAAW,CAAC;MACtBC;IACF,CAAC,GAAG5B,gBAAgB,EAAE;IACtB,MAAM,CAAC6B,KAAK,EAAEC,IAAI,CAAC,GAAGC,QAAQ,CAACL,KAAK,CAAC;IAErCjD,KAAK,CAACC,SAAS,CAAC,MAAM;MACpB;MACA,IACEiD,UAAU,KAAK,EAAE,IACjBC,OAAO,CAACD,UAAU,EAClB;QACEvB,SAAS,CAAC,KAAK,CAAC;QAChBG,iBAAiB,CAACoB,UAAU,CAAC;MAEjC;IACF,CAAC,EAAE,CAACA,UAAU,EAAEC,OAAO,CAACD,UAAU,EAAED,KAAK,CAACM,IAAI,CAAC,CAAC;IAEhD,oBACE;MAAA,wBACE,QAAC,SAAS;QAAA,GAAKN,KAAK;QAAA,GAAMG;MAAK;QAAA;QAAA;QAAA;MAAA,QAAI,EAClC,CAAC,CAACC,IAAI,CAACF,OAAO,IAAI,CAAC,CAACE,IAAI,CAACG,KAAK,iBAAI;QAAA,UAAMH,IAAI,CAACG;MAAK;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA,gBACzD;EAEP,CAAC;EAAC,GAzBAR,OAAO;IAAA,QAIHzB,gBAAgB;EAAA;EAuB1B,oBACM;IAAA,uBACM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAmB;IAAA;IAAA;IAAA;EAAA,QACnB;AAElB,CAAC;AAAA,IAvDKE,SAAS;EAAA,QAKQd,WAAW,EAObW,SAAS;AAAA;AAAA,KAZxBG,SAAS;AAyDf,eAAeA,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACD;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAjBmC,CAoBf;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAfoB,CAgBQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3C4B;AAAA"},"metadata":{},"sourceType":"module"}