{"ast":null,"code":"var _jsxFileName = \"/home/luc/Documents/photobox-peru/src/components/uploadPhotoDialog/uploadPhotoDialog.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport Cropper from 'react-easy-crop';\nimport { Fragment, Container, Slider, Button, Typography, Box } from '@mui/material';\nimport getCroppedImg from '../../utils/cropImage';\nimport { styled } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPhotoDialog = () => {\n  _s();\n  const dogImg = 'https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000';\n  const [imageSrc, setImageSrc] = useState(null);\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [rotation, setRotation] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  const showCroppedImage = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(dogImg, croppedAreaPixels, rotation);\n      console.log('donee', {\n        croppedImage\n      });\n      setCroppedImage(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, rotation]);\n  const onClose = useCallback(() => {\n    setCroppedImage(null);\n  }, []);\n  const onFileChange = async e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n      let imageDataUrl = await readFile(file);\n      setImageSrc(imageDataUrl);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: \"true\",\n    sx: {\n      width: 500\n    },\n    children: imageSrc ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'relative',\n          width: '100%',\n          height: 200,\n          background: '#333'\n        },\n        children: /*#__PURE__*/_jsxDEV(Cropper, {\n          image: dogImg,\n          crop: crop,\n          rotation: rotation,\n          zoom: zoom,\n          aspect: 4 / 3,\n          onCropChange: setCrop,\n          onRotationChange: setRotation,\n          onCropComplete: onCropComplete,\n          onZoomChange: setZoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'stretch'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flex: '1',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"overline\",\n            children: \"Zoom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            value: zoom,\n            min: 1,\n            max: 3,\n            step: 0.1,\n            \"aria-labelledby\": \"Zoom\",\n            onChange: (e, zoom) => setZoom(zoom),\n            style: {\n              padding: '22px 0px',\n              marginLeft: 16\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: showCroppedImage,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Show Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onFileChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 13\n  }, this);\n};\n_s(UploadPhotoDialog, \"XijVSz3XupMu2/i+vlCdssFfuD4=\");\n_c = UploadPhotoDialog;\nexport default UploadPhotoDialog;\n\n/*\nimport React, { useState, useCallback } from 'react'\nimport ReactDOM from 'react-dom'\nimport Cropper from 'react-easy-crop'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { withStyles } from '@material-ui/core/styles'\nimport ImgDialog from './ImgDialog'\nimport getCroppedImg from './cropImage'\nimport { styles } from './styles'\n\n\n\n  return (\n    <div>\n      <div className={classes.cropContainer}>\n        <Cropper\n          image={dogImg}\n          crop={crop}\n          rotation={rotation}\n          zoom={zoom}\n          aspect={4 / 3}\n          onCropChange={setCrop}\n          onRotationChange={setRotation}\n          onCropComplete={onCropComplete}\n          onZoomChange={setZoom}\n        />\n      </div>\n      <div className={classes.controls}>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Zoom\n          </Typography>\n          <Slider\n            value={zoom}\n            min={1}\n            max={3}\n            step={0.1}\n            aria-labelledby=\"Zoom\"\n            classes={{ root: classes.slider }}\n            onChange={(e, zoom) => setZoom(zoom)}\n          />\n        </div>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Rotation\n          </Typography>\n          <Slider\n            value={rotation}\n            min={0}\n            max={360}\n            step={1}\n            aria-labelledby=\"Rotation\"\n            classes={{ root: classes.slider }}\n            onChange={(e, rotation) => setRotation(rotation)}\n          />\n        </div>\n        <Button\n          onClick={showCroppedImage}\n          variant=\"contained\"\n          color=\"primary\"\n          classes={{ root: classes.cropButton }}\n        >\n          Show Result\n        </Button>\n      </div>\n      <ImgDialog img={croppedImage} onClose={onClose} />\n    </div>\n  )\n}\n\nconst StyledDemo = withStyles(styles)(Demo)\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<StyledDemo />, rootElement)\n\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"UploadPhotoDialog\");","map":{"version":3,"names":["React","useState","useCallback","Cropper","Fragment","Container","Slider","Button","Typography","Box","getCroppedImg","styled","UploadPhotoDialog","dogImg","imageSrc","setImageSrc","crop","setCrop","x","y","rotation","setRotation","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","onCropComplete","croppedArea","showCroppedImage","console","log","e","error","onClose","onFileChange","target","files","length","file","imageDataUrl","readFile","width","position","height","background","display","flexDirection","alignItems","flex","padding","marginLeft"],"sources":["/home/luc/Documents/photobox-peru/src/components/uploadPhotoDialog/uploadPhotoDialog.component.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport Cropper from 'react-easy-crop'\nimport { Fragment, Container, Slider, Button, Typography, Box} from '@mui/material';\nimport getCroppedImg from '../../utils/cropImage';\nimport {styled} from '@mui/material/styles';\n\nconst UploadPhotoDialog = () => {\n      const dogImg =\n      'https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000';\n\n      const [imageSrc, setImageSrc] = useState(null);\n      const [crop, setCrop] = useState({ x: 0, y: 0 });\n      const [rotation, setRotation] = useState(0);\n      const [zoom, setZoom] = useState(1);\n      const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n      const [croppedImage, setCroppedImage] = useState(null);\n\n      const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n        setCroppedAreaPixels(croppedAreaPixels);\n      }, [])\n\n      const showCroppedImage = useCallback(async () => {\n      try {\n            const croppedImage = await getCroppedImg(\n            dogImg,\n            croppedAreaPixels,\n            rotation\n            )\n            console.log('donee', { croppedImage });\n            setCroppedImage(croppedImage);\n      } catch (e) {\n            console.error(e);\n      }\n      }, [croppedAreaPixels, rotation])\n\n      const onClose = useCallback(() => {\n      setCroppedImage(null)\n      }, []);\n\n      const onFileChange = async (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n          const file = e.target.files[0]\n          let imageDataUrl = await readFile(file);\n          setImageSrc(imageDataUrl)\n        }\n      }\n\n      return(\n            <Container fluid=\"true\" sx={{\n              width: 500\n            }}>\n              { imageSrc ? (\n              <Fragment>\n                <Box sx={{\n                  position: 'relative',\n                  width: '100%',\n                  height: 200,\n                  background: '#333',\n                }}>\n                  <Cropper\n                        image={dogImg}\n                        crop={crop}\n                        rotation={rotation}\n                        zoom={zoom}\n                        aspect={4/3}\n                        onCropChange={setCrop}\n                        onRotationChange={setRotation}\n                        onCropComplete={onCropComplete}\n                        onZoomChange={setZoom}\n                  /> \n                </Box>\n                <Box sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'stretch',\n                }}>\n                  <Box sx={{\n                    display: 'flex',\n                    flex: '1',\n                    alignItems: 'center',}}\n                  >\n                    <Typography\n                      variant=\"overline\"                  >\n                      Zoom\n                    </Typography>\n                    <Slider\n                      value={zoom}\n                      min={1}\n                      max={3}\n                      step={0.1}\n                      aria-labelledby=\"Zoom\"\n                      onChange={(e, zoom) => setZoom(zoom)}\n                      style={{\n                        padding: '22px 0px',\n                        marginLeft: 16,\n                      }}\n                    />\n                  </Box>\n                  <Button\n                    onClick={showCroppedImage}\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Show Result\n                  </Button>\n                </Box>\n              </Fragment>\n            ) : (\n              <input type=\"file\" onChange={onFileChange} accept=\"image/*\" />\n            )\n            }\n            </Container>\n            \n            \n      );\n}\n\nexport default UploadPhotoDialog;\n\n/*\nimport React, { useState, useCallback } from 'react'\nimport ReactDOM from 'react-dom'\nimport Cropper from 'react-easy-crop'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { withStyles } from '@material-ui/core/styles'\nimport ImgDialog from './ImgDialog'\nimport getCroppedImg from './cropImage'\nimport { styles } from './styles'\n\n\n\n  return (\n    <div>\n      <div className={classes.cropContainer}>\n        <Cropper\n          image={dogImg}\n          crop={crop}\n          rotation={rotation}\n          zoom={zoom}\n          aspect={4 / 3}\n          onCropChange={setCrop}\n          onRotationChange={setRotation}\n          onCropComplete={onCropComplete}\n          onZoomChange={setZoom}\n        />\n      </div>\n      <div className={classes.controls}>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Zoom\n          </Typography>\n          <Slider\n            value={zoom}\n            min={1}\n            max={3}\n            step={0.1}\n            aria-labelledby=\"Zoom\"\n            classes={{ root: classes.slider }}\n            onChange={(e, zoom) => setZoom(zoom)}\n          />\n        </div>\n        <div className={classes.sliderContainer}>\n          <Typography\n            variant=\"overline\"\n            classes={{ root: classes.sliderLabel }}\n          >\n            Rotation\n          </Typography>\n          <Slider\n            value={rotation}\n            min={0}\n            max={360}\n            step={1}\n            aria-labelledby=\"Rotation\"\n            classes={{ root: classes.slider }}\n            onChange={(e, rotation) => setRotation(rotation)}\n          />\n        </div>\n        <Button\n          onClick={showCroppedImage}\n          variant=\"contained\"\n          color=\"primary\"\n          classes={{ root: classes.cropButton }}\n        >\n          Show Result\n        </Button>\n      </div>\n      <ImgDialog img={croppedImage} onClose={onClose} />\n    </div>\n  )\n}\n\nconst StyledDemo = withStyles(styles)(Demo)\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<StyledDemo />, rootElement)\n\n\n\n*/"],"mappings":"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,EAAE3B,IAAK;YACZ,GAAG,EAAE,CAAE;YACP,GAAG,EAAE,CAAE;YACP,IAAI,EAAE,GAAI;YACV,mBAAgB,MAAM;YACtB,QAAQ,EAAE,CAACW,CAAC,EAAEX,IAAI,KAAKC,OAAO,CAACD,IAAI,CAAE;YACrC,KAAK,EAAE;cACL6B,OAAO,EAAE,UAAU;cACnBC,UAAU,EAAE;YACd;UAAE;YAAA;YAAA;YAAA;UAAA,QACF;QAAA;UAAA;UAAA;UAAA;QAAA,QACE,eACN,QAAC,MAAM;UACL,OAAO,EAAEtB,gBAAiB;UAC1B,OAAO,EAAC,WAAW;UACnB,KAAK,EAAC,SAAS;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAGR;MAAA;QAAA;QAAA;QAAA;MAAA,QACL;IAAA;MAAA;MAAA;MAAA;IAAA,QACG,gBAEX;MAAO,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAEM,YAAa;MAAC,MAAM,EAAC;IAAS;MAAA;MAAA;MAAA;IAAA;EAC5D;IAAA;IAAA;IAAA;EAAA,QAEW;AAIxB,CAAC;AAAA,GA7GKxB,iBAAiB;AAAA,KAAjBA,iBAAiB;AA+GvB,eAAeA,iBAAiB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAAA"},"metadata":{},"sourceType":"module"}