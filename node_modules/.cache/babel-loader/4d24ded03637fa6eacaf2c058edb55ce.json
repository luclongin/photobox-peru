{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik } from 'formik';\nimport { FormControl } from \"@mui/material\";\nconst AddPhrase = () => {};\n_c = AddPhrase;\nexport default AddPhrase;\n/*const AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const handleSelectChange = (e) => {\n            setSelectedPhrase(e.target.value);\n            setDisabled(false);\n      }\n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required(),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Enter Text')*/\n//.matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n/* .required('Required')\n}),\nphraseColor: yup\n.string()\n.when(\"phraseType\", {\nis: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\nthen: yup.string('Choose Color').oneOf(\n ['lightWood', 'darkWood'],\n 'Color required')\n .required('Required')\n}),\n});\nuseEffect(() => {\n(selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n//validationSchema.fields.phraseType. selectedPhrase;\nconsole.log(this.props.values.phraseType);\n}, [selectedPhrase]);\nconst formik = useFormik({\ninitialValues: {\nphraseType: '',\nphraseText: '',\nphraseColor: defaultPhraseColor\n},\nvalidationSchema: validationSchema,\nonSubmit: (values) => {\nalert(JSON.stringify(values, null, 2));\n},\n});\n*/ /*setTimeout(() => {\n       values.phraseType = selectedPhrase;\n        if(values.phraseType === 'custom') {\n             dispatch(customPhraseAdded({\n                   text: values.phraseText,\n                   color: values.phraseColor\n             }));\n       } else {\n             // default chosen\n             dispatch(defaultPhraseAdded({\n                   defaultPhrase: values.phraseType\n             }));\n       }\n       alert(JSON.stringify(values, null, 2));\n       setSubmitting(false);\n   }, 400);*/ /*\n              return(\n              <div>\n              <h1>Add Phrase</h1>\n              <form onSubmit={formik.handleSubmit}>\n                <FormControl fullWidth>\n                      <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                      <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                            <MenuItem value=\"family\">Family</MenuItem>      \n                            <MenuItem value=\"friends\">Friends</MenuItem>\n                            <MenuItem value=\"custom\">Personalizado</MenuItem> \n                      </Select>\n                </FormControl>\n                {// !isHidden ? \n                      <Fragment>\n                            <TextField\n                                  label=\"Choose Text...\"\n                                  variant=\"outlined\"\n                                  value={formik.values.phraseText}\n                                  onChange={formik.handleChange}\n                                  error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                  helperText={formik.touched.phraseText && formik.errors.phraseText}\n                            />\n                            \n                            <Select\n                                  name=\"phraseColor\"\n                                  label=\"Choose Color\"\n                                  value={formik.values.phraseColor}\n                                  onChange={formik.handleChange}\n                                  error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                  helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                            >\n                                  <option value=\"lightWood\">Light Wood</option>      \n                                  <option value=\"darkWood\">Dark Wood</option>\n                            </Select>\n                      </Fragment>\n                //      : null\n                }\n                <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n              </form>\n              </div>\n              );\n              }\n              export default AddPhrase;*/\nvar _c;\n$RefreshReg$(_c, \"AddPhrase\");","map":{"version":3,"names":["React","useEffect","useState","Container","Box","InputLabel","Select","MenuItem","TextField","Button","Fragment","useDispatch","nextButtonEnabled","lightWoodBackground","darkWoodBackground","customPhraseAdded","defaultPhraseAdded","yup","Formik","Field","Form","ErrorMessage","useFormik","FormControl","AddPhrase"],"sources":["/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, TextField, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage, useFormik} from 'formik';\nimport {FormControl} from \"@mui/material\";\n\n\nconst AddPhrase = () => {\n      \n}\n\nexport default AddPhrase;\n/*const AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const handleSelectChange = (e) => {\n            setSelectedPhrase(e.target.value);\n            setDisabled(false);\n      }\n\n      const validationSchema = yup.object({\n            phraseType: yup.string().required(),\n            phraseText: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Enter Text')*/\n                                    //.matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n                                   /* .required('Required')\n                        }),\n            phraseColor: yup\n                        .string()\n                        .when(\"phraseType\", {\n                              is: phraseType => [\"family\", \"friends\", \"custom\"].includes(phraseType),\n                              then: yup.string('Choose Color').oneOf(\n                                    ['lightWood', 'darkWood'],\n                                    'Color required')\n                                    .required('Required')\n                        }),\n      });\n\n      useEffect(() => {\n            (selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n            //validationSchema.fields.phraseType. selectedPhrase;\n            console.log(this.props.values.phraseType);\n      }, [selectedPhrase]);\n\n      const formik = useFormik({\n            initialValues: {\n                  phraseType: '',\n                  phraseText: '',\n                  phraseColor: defaultPhraseColor\n            },\n            validationSchema: validationSchema,\n            onSubmit: (values) => {\n                  alert(JSON.stringify(values, null, 2));\n            },\n      });\n                 */ /*setTimeout(() => {\n                        values.phraseType = selectedPhrase;\n\n                        if(values.phraseType === 'custom') {\n                              dispatch(customPhraseAdded({\n                                    text: values.phraseText,\n                                    color: values.phraseColor\n                              }));\n                        } else {\n                              // default chosen\n                              dispatch(defaultPhraseAdded({\n                                    defaultPhrase: values.phraseType\n                              }));\n                        }\n                        alert(JSON.stringify(values, null, 2));\n                        setSubmitting(false);\n                  }, 400);*//*\n            \n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n                  <form onSubmit={formik.handleSubmit}>\n                              <FormControl fullWidth>\n                                    <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                                    <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                                          <MenuItem value=\"family\">Family</MenuItem>      \n                                          <MenuItem value=\"friends\">Friends</MenuItem>\n                                          <MenuItem value=\"custom\">Personalizado</MenuItem> \n                                    </Select>\n                              </FormControl>\n                              {// !isHidden ? \n                                    <Fragment>\n                                          <TextField\n                                                label=\"Choose Text...\"\n                                                variant=\"outlined\"\n                                                value={formik.values.phraseText}\n                                                onChange={formik.handleChange}\n                                                error={formik.touched.phraseText && Boolean(formik.errors.phraseText)}\n                                                helperText={formik.touched.phraseText && formik.errors.phraseText}\n                                          />\n                                          \n                                          <Select\n                                                name=\"phraseColor\"\n                                                label=\"Choose Color\"\n                                                value={formik.values.phraseColor}\n                                                onChange={formik.handleChange}\n                                                error={formik.touched.phraseColor && Boolean(formik.errors.phraseColor)}\n                                                helperText={formik.touched.phraseColor && formik.errors.phraseColor}\n                                          >\n                                                <option value=\"lightWood\">Light Wood</option>      \n                                                <option value=\"darkWood\">Dark Wood</option>\n                                          </Select>\n                                    </Fragment>\n                              //      : null\n                              }\n                              <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n                        </form>\n            </div>\n      );\n}\n\nexport default AddPhrase;*/"],"mappings":"AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,SAAS,EAAEC,GAAG,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC/F,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,OAAOC,kBAAkB,MAAM,2BAA2B;AAC1D,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,uDAAuD;AAC7G,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,YAAY,EAAEC,SAAS,QAAO,QAAQ;AACpE,SAAQC,WAAW,QAAO,eAAe;AAGzC,MAAMC,SAAS,GAAG,MAAM,CAExB,CAAC;AAAA,KAFKA,SAAS;AAIf,eAAeA,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACD;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA5BmC,CA8Bf;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAfoB,CAgBQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3C4B;AAAA"},"metadata":{},"sourceType":"module"}