{"ast":null,"code":"var _jsxFileName = \"/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, Input, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as Yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { FormControl } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddPhrase = () => {\n  _s();\n  const [isHidden, setHidden] = useState(true);\n  const defaultPhraseColor = 'lightWood';\n  const [selectedPhrase, setSelectedPhrase] = useState('');\n  const [isDisabled, setDisabled] = useState(true);\n  const dispatch = useDispatch();\n  const handleSelectChange = e => {\n    setSelectedPhrase(e.target.value);\n    setDisabled(false);\n  };\n  useEffect(() => {\n    selectedPhrase === 'custom' ? setHidden(false) : setHidden(true);\n    console.log(\"state of disabled: \", isDisabled);\n  }, [selectedPhrase]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Phrase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        phraseType: '',\n        phraseText: '',\n        phraseColor: defaultPhraseColor\n      },\n      validationSchema: Yup.object({\n        phraseText: Yup.string().matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i).required('Required'),\n        phraseColor: Yup.string().oneOf(['lightWood', 'darkWood'], 'Color required').required('Required')\n      }),\n      onSubmit: (values, _ref) => {\n        let {\n          setSubmitting\n        } = _ref;\n        //values.phraseType = selectedPhrase;\n        alert(\"YO\");\n        /*setTimeout(() => {\n              if(values.phraseType === 'custom') {\n                    dispatch(customPhraseAdded({\n                          text: values.phraseText,\n                          color: values.phraseColor\n                    }));\n              } else {\n                    // default chosen\n                    dispatch(defaultPhraseAdded({\n                          defaultPhrase: values.phraseType\n                    }));\n              }\n              alert(JSON.stringify(values, null, 2));\n              setSubmitting(false);\n        }, 400);*/\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"choosePhraseType\",\n            children: \"Choose a Phrase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"phraseType\",\n            value: selectedPhrase,\n            labelId: \"choosePhraseType\",\n            onChange: handleSelectChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"family\",\n              children: \"Family\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"friends\",\n              children: \"Friends\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"custom\",\n              children: \"Personalizado\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"phraseType\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 31\n        }, this), !isHidden ? /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"phraseText\",\n            type: \"text\",\n            placeholder: \"Choose Text...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"phraseText\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"phraseColor\",\n            as: \"select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"lightWood\",\n              children: \"Light Wood\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"darkWood\",\n              children: \"Dark Wood\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 43\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"phraseColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 37\n        }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n          disabled: isDisabled,\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Add Phrase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 13\n  }, this);\n};\n_s(AddPhrase, \"21viTB3eBpvnpCwtQGkk81jKhWY=\", false, function () {\n  return [useDispatch];\n});\n_c = AddPhrase;\nexport default AddPhrase;\nvar _c;\n$RefreshReg$(_c, \"AddPhrase\");","map":{"version":3,"names":["React","useEffect","useState","Container","Box","InputLabel","Select","MenuItem","Input","Button","Fragment","useDispatch","nextButtonEnabled","lightWoodBackground","darkWoodBackground","customPhraseAdded","defaultPhraseAdded","Yup","Formik","Field","Form","ErrorMessage","FormControl","AddPhrase","isHidden","setHidden","defaultPhraseColor","selectedPhrase","setSelectedPhrase","isDisabled","setDisabled","dispatch","handleSelectChange","e","target","value","console","log","phraseType","phraseText","phraseColor","object","string","matches","required","oneOf","values","setSubmitting","alert"],"sources":["/home/luc/Documents/photobox-peru/src/components/addPhrase/addPhrase.component.jsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { Container, Box, InputLabel, Select, MenuItem, Input, Button } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nextButtonEnabled } from \"../../features/handleFormButtons/FormButtonsSlice\";\nimport lightWoodBackground from '../../images/lightWood.png';\nimport darkWoodBackground from '../../images/darkWood.png';\nimport { customPhraseAdded, defaultPhraseAdded } from \"../../features/additionalPhrase/AdditionalPhraseSlice\";\nimport * as Yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport {FormControl} from \"@mui/material\";\n\nconst AddPhrase = () => {\n      const [isHidden, setHidden] = useState(true);\n      const defaultPhraseColor = 'lightWood';\n      const [selectedPhrase, setSelectedPhrase] = useState('');\n      const [isDisabled, setDisabled] = useState(true);\n      const dispatch = useDispatch();\n\n      const handleSelectChange = (e) => {\n            setSelectedPhrase(e.target.value);\n            setDisabled(false);\n      }\n      \n      useEffect(() => {\n            (selectedPhrase === 'custom') ? setHidden(false) : setHidden(true);\n            console.log(\"state of disabled: \", isDisabled);\n      }, [selectedPhrase])\n\n      return(\n            <div>\n                  <h1>Add Phrase</h1>\n                  <Formik\n                        initialValues={{phraseType: '', phraseText: '', phraseColor: defaultPhraseColor}}\n                        validationSchema={Yup.object({\n                              phraseText: Yup.string().matches(/^(?!\\s+$)[0-9a-zñáéíóúü]*/i)\n                                          .required('Required'),\n                              phraseColor: Yup.string().oneOf(\n                                          ['lightWood', 'darkWood'],\n                                          'Color required'\n                                    ).required('Required'),\n                        })}\n                        onSubmit={(values, {setSubmitting}) => {\n                              //values.phraseType = selectedPhrase;\n                              alert(\"YO\");\n                              /*setTimeout(() => {\n                                    if(values.phraseType === 'custom') {\n                                          dispatch(customPhraseAdded({\n                                                text: values.phraseText,\n                                                color: values.phraseColor\n                                          }));\n                                    } else {\n                                          // default chosen\n                                          dispatch(defaultPhraseAdded({\n                                                defaultPhrase: values.phraseType\n                                          }));\n                                    }\n                                    alert(JSON.stringify(values, null, 2));\n                                    setSubmitting(false);\n                              }, 400);*/\n                        }}\n                        >\n                        <Form>\n                              <FormControl fullWidth>\n                                    <InputLabel id=\"choosePhraseType\">Choose a Phrase</InputLabel>\n                                    <Select name=\"phraseType\" value={selectedPhrase} labelId=\"choosePhraseType\" onChange={handleSelectChange}>\n                                          <MenuItem value=\"family\">Family</MenuItem>      \n                                          <MenuItem value=\"friends\">Friends</MenuItem>\n                                          <MenuItem value=\"custom\">Personalizado</MenuItem> \n                                    </Select>\n                              </FormControl>                              \n                              <ErrorMessage name=\"phraseType\" />\n                              { !isHidden ? \n                                    <Fragment>\n                                          <Field name=\"phraseText\" type=\"text\" placeholder=\"Choose Text...\"/>\n                                          <ErrorMessage name=\"phraseText\" />\n                                          <Field name=\"phraseColor\" as=\"select\">\n                                                <option value=\"lightWood\">Light Wood</option>      \n                                                <option value=\"darkWood\">Dark Wood</option>\n                                          </Field>\n                                          <ErrorMessage name=\"phraseColor\" />\n\n                                    </Fragment>\n                                    : null\n                              }\n                              <Button disabled={isDisabled} type=\"submit\" variant=\"contained\">Add Phrase</Button>\n                        </Form>\n      \n                  </Formik>\n            </div>\n      );\n}\n\nexport default AddPhrase;"],"mappings":"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"},"metadata":{},"sourceType":"module"}